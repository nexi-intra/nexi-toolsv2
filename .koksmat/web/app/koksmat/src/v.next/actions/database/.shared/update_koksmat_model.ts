/**
 * This function is generated by Koksmat Studio v0.1
 * Feel free to modify it as needed
 *
 */

import { z, ZodObject } from "zod";
import { execute } from "@/actions/client";

// The schema for the UpdateKoksmatModel procedure
const _schema = z.object({
  title: z.any().optional(),
  description: z.string().optional(),
  tenant: z.string().optional(),
  searchindex: z
    .string()
    .describe(
      "Search Index is used for concatenating all searchable fields in a single field making in easier to search\n"
    )
    .optional(),
  name: z.string().optional(),
  data: z.record(z.any()).optional(),
});

//  TypeScript type based on the schema
export type UpdateKoksmatModelProps = z.infer<typeof _schema>;

// Exclude 'tenant' and 'searchindex' from the type
export type InputType = Omit<UpdateKoksmatModelProps, "tenant" | "searchindex">;

/**
// Example usage of the  function UpdateKoksmatModel
try {
  const  result =  UpdateKoksmatModel(
    authtoken, // ensure this is a valid token
    title, //replace title with your own variable
    description, //replace description with your own variable
    name, //replace name with your own variable
    data, //replace data with your own variable);
  
  
} catch (error) {
  console.error( error.message);
}
  */

export default async function UpdateKoksmatModel(
  database: string,
  authtoken: string,
  title: undefined,
  description: string,
  name: string,
  data: object,
  id?: number
) {
  // constructs an object from the input parameters
  const input = { title, description, name, data };

  // The tenant name and search index are applied upstream, so they are omitted from the schema
  const __schema = _schema.omit({ tenant: true, searchindex: true });

  // Input data is validated against the schema, and might be transform during that process
  const item = __schema.safeParse(input);

  if (!item.success) {
    throw new Error(item.error.errors.map((err) => err.message).join(", "));
  }

  const dbrecord = { ...item.data, tenant: "", searchindex: "", id: id };
  const result = await execute(
    authtoken, // <-- this is the authentication token containing the user's credentials - the upn will be used as "actor" name
    database, // <-- this is a reference to a record in the connections table in the mix database
    "magic-mix.app", // <-- this is the service name processing the request
    "update_koksmat_model", // <-- this is the name of the procedure in the database pointed to by the connection
    dbrecord // <-- this is the data to be sent to the procedure
  );
  if (result.hasError) {
    throw new Error(result.errorMessage);
  }
  return result.data;
}
