/**
 * This function is generated by Koksmat Studio v0.1
 * Feel free to modify it as needed
 *
 */

import { z, ZodObject } from "zod";
import { execute } from "@/actions/client";

// The schema for the CreateHistory procedure
const _schema = z
  .object({
    tenant: z.string().optional(),
    searchindex: z
      .string()
      .describe(
        "Search Index is used for concatenating all searchable fields in a single field making in easier to search\n"
      )
      .optional(),
    name: z.string().optional(),
    description: z.string().optional(),
    owner_id: z.number().optional(),
    language: z.string().optional(),
    shared: z.boolean().optional(),
    favorite: z.boolean().optional(),
    code: z.string().optional(),
    metadata: z.record(z.any()).optional(),
  })
  .describe("Create operation");

//  TypeScript type based on the schema
export type CreateHistoryProps = z.infer<typeof _schema>;

// Exclude 'tenant' and 'searchindex' from the type
export type InputType = Omit<CreateHistoryProps, "tenant" | "searchindex">;

/**
// Example usage of the  function CreateHistory
try {
  const  result =  CreateHistory(
    authtoken, // ensure this is a valid token
    name, //replace name with your own variable
    description, //replace description with your own variable
    owner_id, //replace owner_id with your own variable
    language, //replace language with your own variable
    shared, //replace shared with your own variable
    favorite, //replace favorite with your own variable
    code, //replace code with your own variable
    metadata, //replace metadata with your own variable);
  
  
} catch (error) {
  console.error( error.message);
}
  */

export default async function CreateHistory(
  authtoken: string,
  name: string,
  description: string,
  owner_id: number,
  language: string,
  shared: boolean,
  favorite: boolean,
  code: string,
  metadata: object,
  id?: number
) {
  // constructs an object from the input parameters
  const input = {
    name,
    description,
    owner_id,
    language,
    shared,
    favorite,
    code,
    metadata,
  };

  // The tenant name and search index are applied upstream, so they are omitted from the schema
  const __schema = _schema.omit({ tenant: true, searchindex: true });

  // Input data is validated against the schema, and might be transform during that process
  const item = __schema.safeParse(input);

  if (!item.success) {
    throw new Error(item.error.errors.map((err) => err.message).join(", "));
  }

  const dbrecord = { ...item.data, tenant: "", searchindex: "", id: id };
  const result = await execute(
    authtoken, // <-- this is the authentication token containing the user's credentials - the upn will be used as "actor" name
    "mix", // <-- this is a reference to a record in the connections table in the mix database
    "magic-mix.app", // <-- this is the service name processing the request
    "create_history", // <-- this is the name of the procedure in the database pointed to by the connection
    dbrecord // <-- this is the data to be sent to the procedure
  );
  if (result.hasError) {
    throw new Error(result.errorMessage);
  }
  return result.data;
}
