"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Lpibp8te0jk
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import { Input } from "@/components/ui/input";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { useSQLSelect3 } from "@/app/koksmat/usesqlselect3";
import { ToolMiniature } from "./tool-miniature";
import { useEffect, useState } from "react";
import { getBadge } from "@/lib/getbadge";
import { FavouriteIcon } from "./favourite-icon";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { ToolLarge } from "./tool-large";

export interface ToolsProps {
  weburl: string;
  title: string;
  guides: string;
  description?: string;
  url?: string;
  arealookupid: string;
}

export function SectionFavourites() {
  const alltools = useSQLSelect3<ToolsProps>(
    "mix",
    `
select 
weburl,
data_element -> 'fields' ->> 'Title' as title,
data_element -> 'fields' ->> 'Guides' as Guides,
data_element -> 'fields' ->> 'Description' as Description,
data_element -> 'fields' -> 'Document_x0020_Link' ->> 'Url' as Url,
data_element -> 'fields' ->> 'AreaLookupId' as AreaLookupId

from
(SELECT item as data_element, item ->> 'webUrl' as weburl FROM (
SELECT
    jsonb_array_elements(data_element  -> 'data' -> 'details' -> 'value')  AS item
FROM importdata, jsonb_array_elements(data) AS data_element
WHERE
    name ilike 'list-nexiintra-country-it/listitems.json') 
    AS items
    
    
    ) as x 


where weburl ilike '%/Lists/Applications/%'

 
    `
  );

  const [search, setsearch] = useState("");
  const [foundTools, setfoundTools] = useState<ToolsProps[]>([]);
  const [favourites, setfavourites] = useState<ToolsProps[]>([]);
  const [selectedTool, setselectedTool] = useState<ToolsProps | null>(null);

  useEffect(() => {
    if (search === "") {
      setfoundTools([]);
    } else {
      setfoundTools(
        alltools.dataset.filter((tool) =>
          tool.title.toLowerCase().includes(search.toLowerCase())
        )
      );
    }
  }, [search]);

  const isFavourite = (tool: ToolsProps | null) => {
    if (tool === null) return false;
    return favourites.includes(tool);
  };
  const addFavourite = (tool: ToolsProps | null) => {
    if (tool === null) return false;
    if (isFavourite(tool)) return;
    setfavourites([...favourites, tool]);
  };
  const removeFavourite = (tool: ToolsProps | null) => {
    if (tool === null) return false;
    setfavourites(favourites.filter((favourite) => favourite !== tool));
  };

  return (
    <div className="p-6 space-y-8">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">Tools</h1>
          <p className="text-muted-foreground">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean
            commodo ligula eget dolor. Aenean massa.
          </p>
        </div>
        <div className="relative">
          <SearchIcon className="absolute left-3 top-2 h-5 w-5 text-muted-foreground" />
          <Input
            type="search"
            value={search}
            onChange={(e) => setsearch(e.target.value)}
            placeholder="Search tool"
            className="pl-10 w-64"
          />
        </div>
      </div>
      <div>
        <div className="flex flex-wrap ">
          {foundTools
            .sort((a, b) => a.title.localeCompare(b.title))
            .map((tool, index) => {
              return (
                <div
                  key={index}
                  style={{ animationDelay: index * 100 + "ms" }}
                  className={"Xanimate-fadeIn "}
                >
                  <ToolMiniature
                    weburl={tool.weburl}
                    title={tool.title}
                    badge={getBadge(1)}
                    isfavourite={isFavourite(tool)}
                    tooglefavourite={function (): void {
                      if (isFavourite(tool)) {
                        removeFavourite(tool);
                      } else {
                        addFavourite(tool);
                      }
                    }}
                    onClick={function (): void {
                      setselectedTool(tool);
                      // throw new Error("Function not implemented.");
                    }}
                  />
                </div>
              );
            })}
        </div>
        <h2 className="text-2xl font-bold text-blue-600 flex items-center ">
          Favourites{" "}
          <FavouriteIcon
            className="ml-2 h-5 w-5 text-blue-600"
            selected={false}
            onClick={function (): void {
              //throw new Error("Function not implemented.");
            }}
          />
        </h2>
        <p className="text-blue-600 mt-2 cursor-pointer">+ Add tool</p>
        <div className="flex space-x-4 mt-4 flex-wrap ">
          {favourites
            .sort((a, b) => a.title.localeCompare(b.title))
            .map((tool, index) => {
              return (
                <div key={index}>
                  <ToolMiniature
                    weburl={tool.weburl}
                    title={tool.title}
                    badge={getBadge(1)}
                    isfavourite={isFavourite(tool)}
                    onClick={function (): void {
                      //throw new Error("Function not implemented.");
                    }}
                    tooglefavourite={function (): void {
                      if (isFavourite(tool)) {
                        removeFavourite(tool);
                      } else {
                        addFavourite(tool);
                      }
                    }}
                  />
                </div>
              );
            })}
        </div>
      </div>
      {/* <div>
        <h2 className="text-2xl font-bold text-blue-600">Categories</h2>
        <p className="text-muted-foreground">
          Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        </p>
        <div className="grid grid-cols-2 gap-4 mt-4">
          <Button className="bg-blue-600 text-white">Lorem Ipsum</Button>
          <Button className="bg-blue-400 text-white">Lorem Ipsum</Button>
          <Button className="bg-blue-400 text-white">Lorem Ipsum</Button>
          <Button className="bg-blue-400 text-white">Lorem Ipsum</Button>
        </div>
      </div> */}
      <Dialog
        open={selectedTool !== null}
        onOpenChange={(open) => {
          if (!open) setselectedTool(null);
        }}
      >
        {/* <DialogTrigger>Open</DialogTrigger> */}
        <DialogContent>
          {/* <DialogHeader>
            <DialogTitle>Are you absolutely sure?</DialogTitle>
            <DialogDescription>
              This action cannot be undone. This will permanently delete your
              account and remove your data from our servers.
            </DialogDescription>
          </DialogHeader> */}
          <ToolLarge
            weburl={selectedTool?.weburl ?? ""}
            title={selectedTool?.title ?? ""}
            description={selectedTool?.description ?? ""}
            badge={getBadge(1)}
            isfavourite={isFavourite(selectedTool)}
            toogleFavourite={function (): void {
              if (isFavourite(selectedTool)) {
                removeFavourite(selectedTool);
              } else {
                addFavourite(selectedTool);
              }
            }}
            onClick={function (): void {
              // throw new Error("Function not implemented.");
            }}
          />
        </DialogContent>
      </Dialog>
    </div>
  );
}

function PenToolIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15.707 21.293a1 1 0 0 1-1.414 0l-1.586-1.586a1 1 0 0 1 0-1.414l5.586-5.586a1 1 0 0 1 1.414 0l1.586 1.586a1 1 0 0 1 0 1.414z" />
      <path d="m18 13-1.375-6.874a1 1 0 0 0-.746-.776L3.235 2.028a1 1 0 0 0-1.207 1.207L5.35 15.879a1 1 0 0 0 .776.746L13 18" />
      <path d="m2.3 2.3 7.286 7.286" />
      <circle cx="11" cy="11" r="2" />
    </svg>
  );
}

function SearchIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="11" cy="11" r="8" />
      <path d="m21 21-4.3-4.3" />
    </svg>
  );
}
